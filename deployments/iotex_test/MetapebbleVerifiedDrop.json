{
  "address": "0x8e0dD6d904ab04f1E91475A905b5dbd04d8bBe6e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_lat",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_long",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDistance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "deviceHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AMOUNT_PER_DEVICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "distance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "deviceHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "distance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "deviceHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "deviceHash_",
          "type": "bytes32"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lat",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "long",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDistance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IMetapebbleDataVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xaba9f7de319d25a755d5b0a4b05e9a657bfbc1ad029d47da126e52a9d9d2c951",
  "receipt": {
    "to": null,
    "from": "0x8896780a7912829781f70344Ab93E589dDdb2930",
    "contractAddress": "0x8e0dD6d904ab04f1E91475A905b5dbd04d8bBe6e",
    "transactionIndex": 0,
    "gasUsed": "1425284",
    "logsBloom": "0x
    "blockHash": "0x4a4693cd6094cffd6e5c2fa1b0ad22737fe45674a724432b3c19a9d698811992",
    "transactionHash": "0xaba9f7de319d25a755d5b0a4b05e9a657bfbc1ad029d47da126e52a9d9d2c951",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18671135,
        "transactionHash": "0xaba9f7de319d25a755d5b0a4b05e9a657bfbc1ad029d47da126e52a9d9d2c951",
        "address": "0x8e0dD6d904ab04f1E91475A905b5dbd04d8bBe6e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008896780a7912829781f70344ab93e589dddb2930"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4a4693cd6094cffd6e5c2fa1b0ad22737fe45674a724432b3c19a9d698811992"
      }
    ],
    "blockNumber": 18671135,
    "cumulativeGasUsed": "1425284",
    "status": 1,
    "byzantium": true
  },
  "args": [
    120520000,
    30400000,
    1000,
    "0xB9ae925fF8318915e3266e0EA41a37408033caC6",
    "1000000000000000000"
  ],
  "numDeployments": 2,
  "solcInputHash": "047f822773662cf583524d333f3c2e6f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_lat\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_long\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDistance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"deviceHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMOUNT_PER_DEVICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"deviceHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"distance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"deviceHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deviceHash_\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lat\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"long\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDistance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IMetapebbleDataVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/examples/MetapebbleVerifiedDrop.sol\":\"MetapebbleVerifiedDrop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/examples/MetapebbleVerifiedDrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../interface/IMetapebbleDataVerifier.sol\\\";\\nimport \\\"../interface/IVerifyFeeSelector.sol\\\";\\nimport \\\"../interface/IVerifyFeeManager.sol\\\";\\n\\ncontract MetapebbleVerifiedDrop is Ownable, ReentrancyGuard {\\n    event Claimed(address indexed holder, bytes32 indexed deviceHash, uint256 amount);\\n\\n    uint256 public AMOUNT_PER_DEVICE;\\n    IMetapebbleDataVerifier public verifier;\\n    // deviceHash => claimed address\\n    mapping(bytes32 => address) internal _claimedDevices;\\n\\n    int256 public lat;\\n    int256 public long;\\n    uint256 public maxDistance;\\n\\n    constructor(\\n        int256 _lat,\\n        int256 _long,\\n        uint256 _maxDistance,\\n        address _verifier,\\n        uint256 _amount\\n    ) {\\n        require(_amount > 0, \\\"invalid amount\\\");\\n        lat = _lat;\\n        long = _long;\\n        maxDistance = _maxDistance;\\n        verifier = IMetapebbleDataVerifier(_verifier);\\n        AMOUNT_PER_DEVICE = _amount;\\n    }\\n\\n    receive() external payable {\\n        require(msg.value % AMOUNT_PER_DEVICE == 0, \\\"invalid amount\\\");\\n    }\\n\\n    function refund() external onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function claimable() external view returns (bool) {\\n        return address(this).balance >= AMOUNT_PER_DEVICE;\\n    }\\n\\n    function claimed(bytes32 deviceHash_) external view returns (bool) {\\n        return _claimedDevices[deviceHash_] != address(0);\\n    }\\n\\n    function _claim(\\n        address payable holder,\\n        uint256 distance,\\n        bytes32 deviceHash,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp,\\n        bytes memory signature,\\n        uint256 value\\n    ) internal virtual nonReentrant {\\n        require(_claimedDevices[deviceHash] == address(0), \\\"already claimed\\\");\\n        require(address(this).balance - msg.value >= AMOUNT_PER_DEVICE, \\\"no fund\\\");\\n        require(distance <= maxDistance, \\\"invalid location\\\");\\n        require(msg.value >= claimFee(), \\\"miss verifier fee\\\");\\n\\n        bytes32 digest = verifier.generateLocationDistanceDigest(\\n            holder,\\n            lat,\\n            long,\\n            distance,\\n            deviceHash,\\n            startTimestamp,\\n            endTimestamp\\n        );\\n        require(verifier.verify{value: value}(digest, signature), \\\"invalid signature\\\");\\n\\n        _claimedDevices[deviceHash] = holder;\\n        holder.transfer(AMOUNT_PER_DEVICE);\\n        emit Claimed(holder, deviceHash, AMOUNT_PER_DEVICE);\\n    }\\n\\n    function claim(\\n        address payable holder,\\n        uint256 distance,\\n        bytes32 deviceHash,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp,\\n        bytes memory signature\\n    ) external payable {\\n        _claim(holder, distance, deviceHash, startTimestamp, endTimestamp, signature, msg.value);\\n    }\\n\\n    function claim(\\n        uint256 distance,\\n        bytes32 deviceHash,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp,\\n        bytes memory signature\\n    ) external payable {\\n        _claim(\\n            payable(msg.sender),\\n            distance,\\n            deviceHash,\\n            startTimestamp,\\n            endTimestamp,\\n            signature,\\n            msg.value\\n        );\\n    }\\n\\n    function claimFee() public view returns (uint256) {\\n        return\\n            IVerifyFeeManager(\\n                IVerifyFeeSelector(verifier.verifyFeeSelector()).fetchVerifyFeeManager(\\n                    address(this)\\n                )\\n            ).fee(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x8740f8b87690b6458bb254672142df39854abc0815322c14afa01e74088b82bf\",\"license\":\"MIT\"},\"contracts/interface/IMetapebbleDataVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMetapebbleDataVerifier {\\n    function isValidator(address account) external view returns (bool);\\n\\n    function verify(bytes32 digest, bytes memory signature) external payable returns (bool);\\n\\n    function generateLocationDistanceDigest(\\n        address holder,\\n        int256 lat,\\n        int256 long,\\n        uint256 distance,\\n        bytes32 deviceHash,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    ) external view returns (bytes32);\\n\\n    function generateDeviceDigest(\\n        address holder,\\n        bytes32 deviceHash,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    ) external view returns (bytes32);\\n\\n    function verifyFeeSelector() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6912747ab2f0f0f57c8189f0dc46ba357ca3249eadf49bf4a1c7293aa4eb4dc5\",\"license\":\"MIT\"},\"contracts/interface/IVerifyFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVerifyFeeManager {\\n    function fee(address project) external view returns (uint256);\\n\\n    function verify(address project, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe7b35e4fd369947192cbdbb4743f5c185098f7425438a4c0b6f7a475cac3ae94\",\"license\":\"MIT\"},\"contracts/interface/IVerifyFeeSelector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVerifyFeeSelector {\\n    function fetchVerifyFeeManager(address project) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc082c6af96b2b343bb9701b07c358b8ee9d2026c8ec75713bd5c28c28df1ef25\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161111f38038061111f83398101604081905261002f91610104565b610038336100b4565b600180558061007e5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b604482015260640160405180910390fd5b600594909455600692909255600755600380546001600160a01b0319166001600160a01b0390921691909117905560025561015f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080600060a0868803121561011c57600080fd5b855160208701516040880151606089015192975090955093506001600160a01b038116811461014a57600080fd5b80925050608086015190509295509295909350565b610fb18061016e6000396000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a58db1a511610059578063a58db1a5146102a0578063af38d757146102b3578063cc3c0f06146102d7578063f2fde38b1461031c57600080fd5b80638da5cb5b1461024a57806399d32fc414610275578063a2abcfe81461028a57600080fd5b8063590e1ae3116100bb578063590e1ae3146101f75780635dd0d48c1461020c5780636e3dc9921461021f578063715018a61461023557600080fd5b806307bfce37146101665780632b7ac3f31461018f57806355d576cc146101e157600080fd5b36610161576002546100f39034610c22565b1561015f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c696420616d6f756e7400000000000000000000000000000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561017257600080fd5b5061017c60065481565b6040519081526020015b60405180910390f35b34801561019b57600080fd5b506003546101bc9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610186565b3480156101ed57600080fd5b5061017c60055481565b34801561020357600080fd5b5061015f61033c565b61015f61021a366004610d59565b610373565b34801561022b57600080fd5b5061017c60075481565b34801561024157600080fd5b5061015f61038a565b34801561025657600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166101bc565b34801561028157600080fd5b5061017c61039e565b34801561029657600080fd5b5061017c60025481565b61015f6102ae366004610dce565b610557565b3480156102bf57600080fd5b506002544710155b6040519015158152602001610186565b3480156102e357600080fd5b506102c76102f2366004610e32565b60009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b34801561032857600080fd5b5061015f610337366004610e4b565b61056d565b610344610621565b60405133904780156108fc02916000818181858888f19350505050158015610370573d6000803e3d6000fd5b50565b610382868686868686346106a2565b505050505050565b610392610621565b61039c6000610b3a565b565b600354604080517fb17644c9000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163b17644c99160048083019260209291908290030181865afa15801561040e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104329190610e6f565b6040517f3245b62200000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9190911690633245b62290602401602060405180830381865afa15801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c29190610e6f565b6040517f6fcca69b00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9190911690636fcca69b90602401602060405180830381865afa15801561052e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105529190610e8c565b905090565b610566338686868686346106a2565b5050505050565b610575610621565b73ffffffffffffffffffffffffffffffffffffffff8116610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610156565b61037081610b3a565b60005473ffffffffffffffffffffffffffffffffffffffff16331461039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610156565b6106aa610baf565b60008581526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1615610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f616c726561647920636c61696d656400000000000000000000000000000000006044820152606401610156565b6002546107433447610ea5565b10156107ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f6e6f2066756e64000000000000000000000000000000000000000000000000006044820152606401610156565b600754861115610817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f696e76616c6964206c6f636174696f6e000000000000000000000000000000006044820152606401610156565b61081f61039e565b341015610888576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6d697373207665726966696572206665650000000000000000000000000000006044820152606401610156565b6003546005546006546040517fb499ffd100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b8116600483015260248201939093526044810191909152606481018990526084810188905260a4810187905260c48101869052600092919091169063b499ffd19060e401602060405180830381865afa15801561092e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109529190610e8c565b6003546040517f258ae58200000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063258ae5829084906109ad9085908890600401610ee5565b60206040518083038185885af11580156109cb573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109f09190610f59565b610a56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610156565b60008681526004602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8c16908117909155600254915190926108fc831502929190818181858888f19350505050158015610ad3573d6000803e3d6000fd5b50858873ffffffffffffffffffffffffffffffffffffffff167f9b01158d4bc10c112ba32b5240cda97e49e2eb86021f03f6a0f460342ac4dfda600254604051610b1f91815260200190565b60405180910390a350610b3160018055565b50505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015403610c1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610156565b6002600155565b600082610c58577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b73ffffffffffffffffffffffffffffffffffffffff8116811461037057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112610cbf57600080fd5b813567ffffffffffffffff80821115610cda57610cda610c7f565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610d2057610d20610c7f565b81604052838152866020858801011115610d3957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c08789031215610d7257600080fd5b8635610d7d81610c5d565b95506020870135945060408701359350606087013592506080870135915060a087013567ffffffffffffffff811115610db557600080fd5b610dc189828a01610cae565b9150509295509295509295565b600080600080600060a08688031215610de657600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115610e1957600080fd5b610e2588828901610cae565b9150509295509295909350565b600060208284031215610e4457600080fd5b5035919050565b600060208284031215610e5d57600080fd5b8135610e6881610c5d565b9392505050565b600060208284031215610e8157600080fd5b8151610e6881610c5d565b600060208284031215610e9e57600080fd5b5051919050565b81810381811115610edf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b82815260006020604081840152835180604085015260005b81811015610f1957858101830151858201606001528201610efd565b5060006060828601015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509392505050565b600060208284031215610f6b57600080fd5b81518015158114610e6857600080fdfea26469706673582212209c3bed353d8fce802c2399c3a2d6ad7185c57a5adf7aec2d29dfd4e627085f4564736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/examples/MetapebbleVerifiedDrop.sol:MetapebbleVerifiedDrop",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/examples/MetapebbleVerifiedDrop.sol:MetapebbleVerifiedDrop",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 209,
        "contract": "contracts/examples/MetapebbleVerifiedDrop.sol:MetapebbleVerifiedDrop",
        "label": "AMOUNT_PER_DEVICE",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 212,
        "contract": "contracts/examples/MetapebbleVerifiedDrop.sol:MetapebbleVerifiedDrop",
        "label": "verifier",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IMetapebbleDataVerifier)572"
      },
      {
        "astId": 216,
        "contract": "contracts/examples/MetapebbleVerifiedDrop.sol:MetapebbleVerifiedDrop",
        "label": "_claimedDevices",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 218,
        "contract": "contracts/examples/MetapebbleVerifiedDrop.sol:MetapebbleVerifiedDrop",
        "label": "lat",
        "offset": 0,
        "slot": "5",
        "type": "t_int256"
      },
      {
        "astId": 220,
        "contract": "contracts/examples/MetapebbleVerifiedDrop.sol:MetapebbleVerifiedDrop",
        "label": "long",
        "offset": 0,
        "slot": "6",
        "type": "t_int256"
      },
      {
        "astId": 222,
        "contract": "contracts/examples/MetapebbleVerifiedDrop.sol:MetapebbleVerifiedDrop",
        "label": "maxDistance",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMetapebbleDataVerifier)572": {
        "encoding": "inplace",
        "label": "contract IMetapebbleDataVerifier",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}