{
  "address": "0x68E1099c384a2D341d23D5e946138835882AF3ee",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "int256[]",
          "name": "_lats",
          "type": "int256[]"
        },
        {
          "internalType": "int256[]",
          "name": "_longs",
          "type": "int256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_maxDistances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_startTimestamps",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_endTimestamps",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "deviceHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "lat",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "long",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxDistance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "PlaceAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "PlaceManagerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "PlaceManagerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_lat",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_long",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDistance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "addPlace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "addPlaceManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "lat_",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "long_",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "distance_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "deviceHash_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "deviceHash_",
          "type": "bytes32"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "deviceHash_",
          "type": "bytes32"
        }
      ],
      "name": "claimedUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "palceCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "placeManagers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "places",
      "outputs": [
        {
          "internalType": "int256",
          "name": "lat",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "long",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maxDistance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "placesHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "removePlaceManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IMetapebbleDataVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb57c0b89942c3dffc84e852e7360c8361f9bb94506fa933d98aaeb5a24f7e1a7",
  "receipt": {
    "to": null,
    "from": "0x0BDf1bc0cdD2E41E62E6BE2F756634FE2b587906",
    "contractAddress": "0x68E1099c384a2D341d23D5e946138835882AF3ee",
    "transactionIndex": 0,
    "gasUsed": "4329574",
    "logsBloom": "0x
    "blockHash": "0x1f05089614bf1740a0630c1be832c5157124d6bf196c33b11cdd3e3692739ef1",
    "transactionHash": "0xb57c0b89942c3dffc84e852e7360c8361f9bb94506fa933d98aaeb5a24f7e1a7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21289819,
        "transactionHash": "0xb57c0b89942c3dffc84e852e7360c8361f9bb94506fa933d98aaeb5a24f7e1a7",
        "address": "0x68E1099c384a2D341d23D5e946138835882AF3ee",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000bdf1bc0cdd2e41e62e6be2f756634fe2b587906"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1f05089614bf1740a0630c1be832c5157124d6bf196c33b11cdd3e3692739ef1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 21289819,
        "transactionHash": "0xb57c0b89942c3dffc84e852e7360c8361f9bb94506fa933d98aaeb5a24f7e1a7",
        "address": "0x68E1099c384a2D341d23D5e946138835882AF3ee",
        "topics": [
          "0x4702fb9ba3963a7fbcca390698a54c43664028dc33f9c9b3dbabb2e17b63c272"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000001cfde0000000000000000000000000000000000000000000000000000000000072efd4000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000063aaa30d0000000000000000000000000000000000000000000000000000000063aaa6f5",
        "logIndex": 1,
        "blockHash": "0x1f05089614bf1740a0630c1be832c5157124d6bf196c33b11cdd3e3692739ef1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 21289819,
        "transactionHash": "0xb57c0b89942c3dffc84e852e7360c8361f9bb94506fa933d98aaeb5a24f7e1a7",
        "address": "0x68E1099c384a2D341d23D5e946138835882AF3ee",
        "topics": [
          "0x4702fb9ba3963a7fbcca390698a54c43664028dc33f9c9b3dbabb2e17b63c272"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000001cde5f0000000000000000000000000000000000000000000000000000000000727afe300000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000063aaa30d0000000000000000000000000000000000000000000000000000000063d2300d",
        "logIndex": 2,
        "blockHash": "0x1f05089614bf1740a0630c1be832c5157124d6bf196c33b11cdd3e3692739ef1"
      }
    ],
    "blockNumber": 21289819,
    "cumulativeGasUsed": "4329574",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      30400000,
      30270960
    ],
    [
      120520000,
      120041443
    ],
    [
      1000,
      1000
    ],
    [
      1672127245,
      1672127245
    ],
    [
      1672128245,
      1674719245
    ],
    "0x539057424d2A1A0B7D7Af6F322f34569b967b272",
    "Multiple Place Pebble NFT",
    "MPT"
  ],
  "numDeployments": 2,
  "solcInputHash": "72a6d4c2b6c324d0de3203e85b59e688",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"_lats\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"_longs\",\"type\":\"int256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxDistances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_endTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"deviceHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lat\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"long\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDistance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"PlaceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"PlaceManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"PlaceManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_lat\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_long\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDistance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"addPlace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"addPlaceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"lat_\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"long_\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"distance_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"deviceHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deviceHash_\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"deviceHash_\",\"type\":\"bytes32\"}],\"name\":\"claimedUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"palceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"placeManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"places\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"lat\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"long\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxDistance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"placesHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"removePlaceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IMetapebbleDataVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/examples/PebbleMultipleLocationNFT.sol\":\"PebbleMultipleLocationNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/examples/MetapebbleVerifiedEnumerableNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"../interface/IMetapebbleDataVerifier.sol\\\";\\nimport \\\"../interface/IVerifyFeeSelector.sol\\\";\\nimport \\\"../interface/IVerifyFeeManager.sol\\\";\\n\\ncontract MetapebbleVerifiedEnumerableNFT is ERC721Enumerable {\\n    event Claimed(address indexed holder, bytes32 indexed deviceHash, uint256 indexed tokenId);\\n\\n    IMetapebbleDataVerifier public verifier;\\n\\n    constructor(\\n        address _verifier,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC721(_name, _symbol) {\\n        verifier = IMetapebbleDataVerifier(_verifier);\\n    }\\n\\n    // deviceHash => claimed address\\n    mapping(bytes32 => address) internal _claimedDevices;\\n\\n    function claimed(bytes32 deviceHash_) external view returns (bool) {\\n        return _claimedDevices[deviceHash_] != address(0);\\n    }\\n\\n    function claimedUser(bytes32 deviceHash_) external view returns (address) {\\n        return _claimedDevices[deviceHash_];\\n    }\\n\\n    function _mint(\\n        uint256 tokenId,\\n        address holder,\\n        bytes32 deviceHash\\n    ) private {\\n        _mint(holder, tokenId);\\n        _claimedDevices[deviceHash] = holder;\\n        emit Claimed(holder, deviceHash, tokenId);\\n    }\\n\\n    function _claim(\\n        uint256 tokenId,\\n        address holder,\\n        int256 lat,\\n        int256 long,\\n        uint256 distance,\\n        bytes32 deviceHash,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp,\\n        bytes memory signature,\\n        uint256 value\\n    ) internal virtual {\\n        bytes32 digest = verifier.generateLocationDistanceDigest(\\n            holder,\\n            lat,\\n            long,\\n            distance,\\n            deviceHash,\\n            startTimestamp,\\n            endTimestamp\\n        );\\n        require(verifier.verify{value: value}(digest, signature), \\\"invalid signature\\\");\\n\\n        _mint(tokenId, holder, deviceHash);\\n    }\\n\\n    function _claim(\\n        uint256 tokenId,\\n        address holder,\\n        bytes32 deviceHash,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp,\\n        bytes memory signature,\\n        uint256 value\\n    ) internal virtual {\\n        bytes32 digest = verifier.generateDeviceDigest(\\n            holder,\\n            deviceHash,\\n            startTimestamp,\\n            endTimestamp\\n        );\\n        require(verifier.verify{value: value}(digest, signature), \\\"invalid signature\\\");\\n\\n        _mint(tokenId, holder, deviceHash);\\n    }\\n\\n    function claimFee() external view returns (uint256) {\\n        return\\n            IVerifyFeeManager(\\n                IVerifyFeeSelector(verifier.verifyFeeSelector()).fetchVerifyFeeManager(\\n                    address(this)\\n                )\\n            ).fee(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x042dee32685faff585812f6d925d1caedf921c984e95529747ce00f41121569a\",\"license\":\"MIT\"},\"contracts/examples/PebbleMultipleLocationNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./MetapebbleVerifiedEnumerableNFT.sol\\\";\\n\\ncontract PebbleMultipleLocationNFT is Ownable, ReentrancyGuard, MetapebbleVerifiedEnumerableNFT {\\n    struct Place {\\n        int256 lat;\\n        int256 long;\\n        uint256 maxDistance;\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n    }\\n\\n    event PlaceManagerAdded(address indexed manager);\\n    event PlaceManagerRemoved(address indexed manager);\\n    event PlaceAdded(\\n        int256 lat,\\n        int256 long,\\n        uint256 maxDistance,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    );\\n\\n    uint256 private constant ONE_DAY = 1 days;\\n    bytes32[] public placesHash;\\n    mapping(bytes32 => Place) public places;\\n    mapping(address => bool) public placeManagers;\\n\\n    uint256 private tokenId;\\n\\n    modifier onlyPlaceManager() {\\n        require(\\n            placeManagers[_msgSender()],\\n            \\\"PebbleMultipleLocationNFT: caller is not the place manager\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        int256[] memory _lats,\\n        int256[] memory _longs,\\n        uint256[] memory _maxDistances,\\n        uint256[] memory _startTimestamps,\\n        uint256[] memory _endTimestamps,\\n        address _verifier,\\n        string memory _name,\\n        string memory _symbol\\n    ) MetapebbleVerifiedEnumerableNFT(_verifier, _name, _symbol) {\\n        require(\\n            _lats.length == _longs.length && _lats.length == _maxDistances.length,\\n            \\\"invalid place\\\"\\n        );\\n        for (uint256 i = 0; i < _lats.length; i++) {\\n            require(_maxDistances[i] > 0, \\\"invalid max distance\\\");\\n            require(_lats[i] >= -90000000 && _lats[i] <= 90000000, \\\"invalid lat\\\");\\n            require(_longs[i] >= -180000000 && _longs[i] <= 180000000, \\\"invalid long\\\");\\n            require(\\n                _endTimestamps[i] > _startTimestamps[i] && _endTimestamps[i] > block.timestamp,\\n                \\\"invalid timestamp\\\"\\n            );\\n            bytes32 hash = keccak256(\\n                abi.encodePacked(\\n                    _lats[i],\\n                    _longs[i],\\n                    _maxDistances[i],\\n                    _startTimestamps[i],\\n                    _endTimestamps[i]\\n                )\\n            );\\n            require(places[hash].maxDistance == 0, \\\"repeated place\\\");\\n\\n            places[hash] = Place({\\n                lat: _lats[i],\\n                long: _longs[i],\\n                maxDistance: _maxDistances[i],\\n                startTimestamp: _startTimestamps[i],\\n                endTimestamp: _endTimestamps[i]\\n            });\\n            placesHash.push(hash);\\n            emit PlaceAdded(\\n                _lats[i],\\n                _longs[i],\\n                _maxDistances[i],\\n                _startTimestamps[i],\\n                _endTimestamps[i]\\n            );\\n        }\\n    }\\n\\n    function palceCount() external view returns (uint256) {\\n        return placesHash.length;\\n    }\\n\\n    function addPlace(\\n        int256 _lat,\\n        int256 _long,\\n        uint256 _maxDistance,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp\\n    ) external onlyPlaceManager {\\n        require(_maxDistance > 0, \\\"invalid max distance\\\");\\n        require(\\n            _endTimestamp > _startTimestamp && _endTimestamp > block.timestamp,\\n            \\\"invalid timestamp\\\"\\n        );\\n        require(_lat >= -90000000 && _lat <= 90000000, \\\"invalid lat\\\");\\n        require(_long >= -180000000 && _long <= 180000000, \\\"invalid long\\\");\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(_lat, _long, _maxDistance, _startTimestamp, _endTimestamp)\\n        );\\n        require(places[hash].maxDistance == 0, \\\"repeated place\\\");\\n\\n        places[hash] = Place({\\n            lat: _lat,\\n            long: _long,\\n            maxDistance: _maxDistance,\\n            startTimestamp: _startTimestamp,\\n            endTimestamp: _endTimestamp\\n        });\\n        placesHash.push(hash);\\n    }\\n\\n    function claim(\\n        int256 lat_,\\n        int256 long_,\\n        uint256 distance_,\\n        bytes32 deviceHash_,\\n        uint256 startTimestamp_,\\n        uint256 endTimestamp_,\\n        bytes memory signature\\n    ) external payable nonReentrant {\\n        // fixed location verify logic\\n        require(_claimedDevices[deviceHash_] == address(0), \\\"already claimed\\\");\\n        Place memory place = places[\\n            keccak256(abi.encodePacked(lat_, long_, distance_, startTimestamp_, endTimestamp_))\\n        ];\\n        require(place.maxDistance > 0, \\\"place not exists\\\");\\n\\n        _claim(\\n            tokenId,\\n            msg.sender,\\n            lat_,\\n            long_,\\n            distance_,\\n            deviceHash_,\\n            startTimestamp_,\\n            endTimestamp_,\\n            signature,\\n            msg.value\\n        );\\n        tokenId++;\\n    }\\n\\n    function addPlaceManager(address manager) external onlyOwner {\\n        require(!placeManagers[manager], \\\"PebbleMultipleLocationNFT: already manager\\\");\\n        placeManagers[manager] = true;\\n        emit PlaceManagerAdded(manager);\\n    }\\n\\n    function removePlaceManager(address manager) external onlyOwner {\\n        require(placeManagers[manager], \\\"PebbleMultipleLocationNFT: not manager\\\");\\n        placeManagers[manager] = false;\\n        emit PlaceManagerRemoved(manager);\\n    }\\n}\\n\",\"keccak256\":\"0x24115b382401e268f1312cb4a69f97ca99ecfa3163ef21c16ad0e52e0152d0be\",\"license\":\"MIT\"},\"contracts/interface/IMetapebbleDataVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMetapebbleDataVerifier {\\n    function isValidator(address account) external view returns (bool);\\n\\n    function verify(bytes32 digest, bytes memory signature) external payable returns (bool);\\n\\n    function generateLocationDistanceDigest(\\n        address holder,\\n        int256 lat,\\n        int256 long,\\n        uint256 distance,\\n        bytes32 deviceHash,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    ) external view returns (bytes32);\\n\\n    function generateDeviceDigest(\\n        address holder,\\n        bytes32 deviceHash,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    ) external view returns (bytes32);\\n\\n    function verifyFeeSelector() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6912747ab2f0f0f57c8189f0dc46ba357ca3249eadf49bf4a1c7293aa4eb4dc5\",\"license\":\"MIT\"},\"contracts/interface/IVerifyFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVerifyFeeManager {\\n    function fee(address project) external view returns (uint256);\\n\\n    function verify(address project, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe7b35e4fd369947192cbdbb4743f5c185098f7425438a4c0b6f7a475cac3ae94\",\"license\":\"MIT\"},\"contracts/interface/IVerifyFeeSelector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVerifyFeeSelector {\\n    function fetchVerifyFeeManager(address project) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc082c6af96b2b343bb9701b07c358b8ee9d2026c8ec75713bd5c28c28df1ef25\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200398538038062003985833981016040819052620000349162000849565b828282818162000044336200067e565b60018055600262000056838262000a1b565b50600362000065828262000a1b565b5050600c80546001600160a01b0319166001600160a01b03959095169490941790935550508751895114905080156200009f575085518851145b620000e15760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420706c61636560981b60448201526064015b60405180910390fd5b60005b88518110156200066f57600087828151811062000105576200010562000ae7565b6020026020010151116200015c5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206d61782064697374616e63650000000000000000000000006044820152606401620000d8565b63055d4a7f1989828151811062000177576200017762000ae7565b602002602001015112158015620001ae575063055d4a80898281518110620001a357620001a362000ae7565b602002602001015113155b620001ea5760405162461bcd60e51b815260206004820152600b60248201526a1a5b9d985b1a59081b185d60aa1b6044820152606401620000d8565b630aba94ff1988828151811062000205576200020562000ae7565b6020026020010151121580156200023c5750630aba950088828151811062000231576200023162000ae7565b602002602001015113155b620002795760405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964206c6f6e6760a01b6044820152606401620000d8565b8581815181106200028e576200028e62000ae7565b6020026020010151858281518110620002ab57620002ab62000ae7565b6020026020010151118015620002dc575042858281518110620002d257620002d262000ae7565b6020026020010151115b6200031e5760405162461bcd60e51b81526020600482015260116024820152700696e76616c69642074696d657374616d7607c1b6044820152606401620000d8565b600089828151811062000335576200033562000ae7565b602002602001015189838151811062000352576200035262000ae7565b60200260200101518984815181106200036f576200036f62000ae7565b60200260200101518985815181106200038c576200038c62000ae7565b6020026020010151898681518110620003a957620003a962000ae7565b6020026020010151604051602001620003e4959493929190948552602085019390935260408401919091526060830152608082015260a00190565b60408051601f1981840301815291815281516020928301206000818152600f909352912060020154909150156200044f5760405162461bcd60e51b815260206004820152600e60248201526d726570656174656420706c61636560901b6044820152606401620000d8565b6040518060a001604052808b84815181106200046f576200046f62000ae7565b602002602001015181526020018a848151811062000491576200049162000ae7565b60200260200101518152602001898481518110620004b357620004b362000ae7565b60200260200101518152602001888481518110620004d557620004d562000ae7565b60200260200101518152602001878481518110620004f757620004f762000ae7565b6020908102919091018101519091526000838152600f82526040808220845181559284015160018085019190915590840151600284015560608401516003840155608090930151600490920191909155600e8054928301815590527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0181905589517f4702fb9ba3963a7fbcca390698a54c43664028dc33f9c9b3dbabb2e17b63c272908b9084908110620005b057620005b062000ae7565b60200260200101518a8481518110620005cd57620005cd62000ae7565b60200260200101518a8581518110620005ea57620005ea62000ae7565b60200260200101518a868151811062000607576200060762000ae7565b60200260200101518a878151811062000624576200062462000ae7565b60209081029190910181015160408051968752918601949094528401919091526060830152608082015260a00160405180910390a15080620006668162000afd565b915050620000e4565b50505050505050505062000b25565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200070f576200070f620006ce565b604052919050565b600082601f8301126200072957600080fd5b815160206001600160401b03821115620007475762000747620006ce565b8160051b62000758828201620006e4565b92835284810182019282810190878511156200077357600080fd5b83870192505b84831015620007945782518252918301919083019062000779565b979650505050505050565b80516001600160a01b0381168114620007b757600080fd5b919050565b600082601f830112620007ce57600080fd5b81516001600160401b03811115620007ea57620007ea620006ce565b602062000800601f8301601f19168201620006e4565b82815285828487010111156200081557600080fd5b60005b838110156200083557858101830151828201840152820162000818565b506000928101909101919091529392505050565b600080600080600080600080610100898b0312156200086757600080fd5b88516001600160401b03808211156200087f57600080fd5b6200088d8c838d0162000717565b995060208b0151915080821115620008a457600080fd5b620008b28c838d0162000717565b985060408b0151915080821115620008c957600080fd5b620008d78c838d0162000717565b975060608b0151915080821115620008ee57600080fd5b620008fc8c838d0162000717565b965060808b01519150808211156200091357600080fd5b620009218c838d0162000717565b95506200093160a08c016200079f565b945060c08b01519150808211156200094857600080fd5b620009568c838d01620007bc565b935060e08b01519150808211156200096d57600080fd5b506200097c8b828c01620007bc565b9150509295985092959890939650565b600181811c90821680620009a157607f821691505b602082108103620009c257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000a1657600081815260208120601f850160051c81016020861015620009f15750805b601f850160051c820191505b8181101562000a1257828155600101620009fd565b5050505b505050565b81516001600160401b0381111562000a375762000a37620006ce565b62000a4f8162000a4884546200098c565b84620009c8565b602080601f83116001811462000a87576000841562000a6e5750858301515b600019600386901b1c1916600185901b17855562000a12565b600085815260208120601f198616915b8281101562000ab85788860151825594840194600190910190840162000a97565b508582101562000ad75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b60006001820162000b1e57634e487b7160e01b600052601160045260246000fd5b5060010190565b612e508062000b356000396000f3fe6080604052600436106101d85760003560e01c8063715018a611610102578063a4353eb011610095578063cc3c0f0611610064578063cc3c0f06146105aa578063df0580fd146105e2578063e985e9c514610602578063f2fde38b1461064b57600080fd5b8063a4353eb014610535578063b88d4fde1461054a578063bc29942e1461056a578063c87b56dd1461058a57600080fd5b806395d89b41116100d157806395d89b41146104cb57806399d32fc4146104e05780639da5d98b146104f5578063a22cb4651461051557600080fd5b8063715018a614610442578063781d2e6a146104575780637d6fbd9e146104775780638da5cb5b146104ad57600080fd5b80632dfd452a1161017a5780636352211e116101495780636352211e14610360578063678f98b7146103805780636cbbd7b6146103f257806370a082311461042257600080fd5b80632dfd452a146102ed5780632f745c591461030057806342842e0e146103205780634f6ccce71461034057600080fd5b8063095ea7b3116101b6578063095ea7b31461026c57806318160ddd1461028e57806323b872dd146102ad5780632b7ac3f3146102cd57600080fd5b806301ffc9a7146101dd57806306fdde0314610212578063081812fc14610234575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004612825565b61066b565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b506102276106c7565b60405161020991906128b0565b34801561024057600080fd5b5061025461024f3660046128c3565b610759565b6040516001600160a01b039091168152602001610209565b34801561027857600080fd5b5061028c6102873660046128f1565b610780565b005b34801561029a57600080fd5b50600a545b604051908152602001610209565b3480156102b957600080fd5b5061028c6102c836600461291d565b6108b6565b3480156102d957600080fd5b50600c54610254906001600160a01b031681565b61028c6102fb366004612a38565b61093d565b34801561030c57600080fd5b5061029f61031b3660046128f1565b610ac1565b34801561032c57600080fd5b5061028c61033b36600461291d565b610b69565b34801561034c57600080fd5b5061029f61035b3660046128c3565b610b84565b34801561036c57600080fd5b5061025461037b3660046128c3565b610c28565b34801561038c57600080fd5b506103ca61039b3660046128c3565b600f60205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610209565b3480156103fe57600080fd5b506101fd61040d366004612aaf565b60106020526000908152604090205460ff1681565b34801561042e57600080fd5b5061029f61043d366004612aaf565b610c8d565b34801561044e57600080fd5b5061028c610d27565b34801561046357600080fd5b5061028c610472366004612acc565b610d3b565b34801561048357600080fd5b506102546104923660046128c3565b6000908152600d60205260409020546001600160a01b031690565b3480156104b957600080fd5b506000546001600160a01b0316610254565b3480156104d757600080fd5b506102276110ba565b3480156104ec57600080fd5b5061029f6110c9565b34801561050157600080fd5b5061029f6105103660046128c3565b61125b565b34801561052157600080fd5b5061028c610530366004612b15565b61127c565b34801561054157600080fd5b50600e5461029f565b34801561055657600080fd5b5061028c610565366004612b4e565b61128b565b34801561057657600080fd5b5061028c610585366004612aaf565b611319565b34801561059657600080fd5b506102276105a53660046128c3565b61141a565b3480156105b657600080fd5b506101fd6105c53660046128c3565b6000908152600d60205260409020546001600160a01b0316151590565b3480156105ee57600080fd5b5061028c6105fd366004612aaf565b61148e565b34801561060e57600080fd5b506101fd61061d366004612bba565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561065757600080fd5b5061028c610666366004612aaf565b61158b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806106c157506106c18261161b565b92915050565b6060600280546106d690612be8565b80601f016020809104026020016040519081016040528092919081815260200182805461070290612be8565b801561074f5780601f106107245761010080835404028352916020019161074f565b820191906000526020600020905b81548152906001019060200180831161073257829003601f168201915b5050505050905090565b6000610764826116fe565b506000908152600660205260409020546001600160a01b031690565b600061078b82610c28565b9050806001600160a01b0316836001600160a01b0316036108195760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806108355750610835813361061d565b6108a75760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610810565b6108b18383611762565b505050565b6108c033826117e8565b6109325760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610810565b6108b1838383611867565b610945611ad3565b6000848152600d60205260409020546001600160a01b0316156109aa5760405162461bcd60e51b815260206004820152600f60248201527f616c726561647920636c61696d656400000000000000000000000000000000006044820152606401610810565b6040805160208082018a9052818301899052606082018890526080820186905260a08083018690528351808403909101815260c083018085528151918301919091206000908152600f90925290839020610160830190935282548152600183015460e08301526002830154610100830181905260038401546101208401526004909301546101409092019190915290610a855760405162461bcd60e51b815260206004820152601060248201527f706c616365206e6f7420657869737473000000000000000000000000000000006044820152606401610810565b610a99601154338a8a8a8a8a8a8a34611b2c565b60118054906000610aa983612c6a565b919050555050610ab860018055565b50505050505050565b6000610acc83610c8d565b8210610b405760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610810565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b6108b18383836040518060200160405280600081525061128b565b6000610b8f600a5490565b8210610c035760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610810565b600a8281548110610c1657610c16612ca2565b90600052602060002001549050919050565b6000818152600460205260408120546001600160a01b0316806106c15760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610810565b60006001600160a01b038216610d0b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610810565b506001600160a01b031660009081526005602052604090205490565b610d2f611cd3565b610d396000611d2d565b565b3360009081526010602052604090205460ff16610dc05760405162461bcd60e51b815260206004820152603a60248201527f506562626c654d756c7469706c654c6f636174696f6e4e46543a2063616c6c6560448201527f72206973206e6f742074686520706c616365206d616e616765720000000000006064820152608401610810565b60008311610e105760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206d61782064697374616e63650000000000000000000000006044820152606401610810565b8181118015610e1e57504281115b610e6a5760405162461bcd60e51b815260206004820152601160248201527f696e76616c69642074696d657374616d700000000000000000000000000000006044820152606401610810565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaa2b5808512158015610e9e575063055d4a808513155b610eea5760405162461bcd60e51b815260206004820152600b60248201527f696e76616c6964206c61740000000000000000000000000000000000000000006044820152606401610810565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5456b008412158015610f1e5750630aba95008413155b610f6a5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206c6f6e6700000000000000000000000000000000000000006044820152606401610810565b6040805160208101879052908101859052606081018490526080810183905260a0810182905260009060c001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600f9093529120600201549091501561102c5760405162461bcd60e51b815260206004820152600e60248201527f726570656174656420706c6163650000000000000000000000000000000000006044820152606401610810565b6040805160a081018252968752602080880196875287820195865260608801948552608088019384526000838152600f909152908120965187559451600180880191909155935160028701559151600386015551600490940193909355600e805491820181559091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0155565b6060600380546106d690612be8565b600c54604080517fb17644c900000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163b17644c99160048083019260209291908290030181865afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111509190612cd1565b6040517f3245b6220000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039190911690633245b62290602401602060405180830381865afa1580156111af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d39190612cd1565b6040517f6fcca69b0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039190911690636fcca69b90602401602060405180830381865afa158015611232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112569190612cee565b905090565b600e818154811061126b57600080fd5b600091825260209091200154905081565b611287338383611d95565b5050565b61129533836117e8565b6113075760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610810565b61131384848484611e81565b50505050565b611321611cd3565b6001600160a01b03811660009081526010602052604090205460ff16156113b05760405162461bcd60e51b815260206004820152602a60248201527f506562626c654d756c7469706c654c6f636174696f6e4e46543a20616c72656160448201527f6479206d616e61676572000000000000000000000000000000000000000000006064820152608401610810565b6001600160a01b03811660008181526010602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f2f9ee5b083d19b4fbd83e4be14aa1001578c266abf2b290a1053718dd108f4f99190a250565b6060611425826116fe565b600061143c60408051602081019091526000815290565b9050600081511161145c5760405180602001604052806000815250611487565b8061146684611f0a565b604051602001611477929190612d07565b6040516020818303038152906040525b9392505050565b611496611cd3565b6001600160a01b03811660009081526010602052604090205460ff166115245760405162461bcd60e51b815260206004820152602660248201527f506562626c654d756c7469706c654c6f636174696f6e4e46543a206e6f74206d60448201527f616e6167657200000000000000000000000000000000000000000000000000006064820152608401610810565b6001600160a01b03811660008181526010602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517fb6f2279d13e81743ffa72180ff81661181aa50e834804a48f8019da533a790a39190a250565b611593611cd3565b6001600160a01b03811661160f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610810565b61161881611d2d565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806116ae57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806106c157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146106c1565b6000818152600460205260409020546001600160a01b03166116185760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610810565b600081815260066020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915581906117af82610c28565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806117f483610c28565b9050806001600160a01b0316846001600160a01b0316148061183b57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b8061185f5750836001600160a01b031661185484610759565b6001600160a01b0316145b949350505050565b826001600160a01b031661187a82610c28565b6001600160a01b0316146118f65760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610810565b6001600160a01b0382166119715760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610810565b61197e8383836001611fc8565b826001600160a01b031661199182610c28565b6001600160a01b031614611a0d5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610810565b600081815260066020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b038781168086526005855283862080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905590871680865283862080546001019055868652600490945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600260015403611b255760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610810565b6002600155565b600c546040517fb499ffd10000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152602482018b9052604482018a9052606482018990526084820188905260a4820187905260c48201869052600092169063b499ffd19060e401602060405180830381865afa158015611bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bde9190612cee565b600c546040517f258ae5820000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063258ae582908490611c2c9085908890600401612d36565b60206040518083038185885af1158015611c4a573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611c6f9190612d4f565b611cbb5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610810565b611cc68b8b88612110565b5050505050505050505050565b6000546001600160a01b03163314610d395760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610810565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031603611df65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610810565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e8c848484611867565b611e988484848461218d565b6113135760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610810565b60606000611f178361234c565b600101905060008167ffffffffffffffff811115611f3757611f3761295e565b6040519080825280601f01601f191660200182016040528015611f61576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611f6b57509392505050565b611fd48484848461242e565b600181111561204b5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f7274656400000000000000000000006064820152608401610810565b816001600160a01b0385166120a7576120a281600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b6120ca565b836001600160a01b0316856001600160a01b0316146120ca576120ca85826124b6565b6001600160a01b0384166120e6576120e181612553565b612109565b846001600160a01b0316846001600160a01b031614612109576121098482612602565b5050505050565b61211a8284612646565b6000818152600d602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038616908117909155905185928492917f9b01158d4bc10c112ba32b5240cda97e49e2eb86021f03f6a0f460342ac4dfda9190a4505050565b60006001600160a01b0384163b15612341576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906121ea903390899088908890600401612d6c565b6020604051808303816000875af1925050508015612243575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261224091810190612da8565b60015b6122f6573d808015612271576040519150601f19603f3d011682016040523d82523d6000602084013e612276565b606091505b5080516000036122ee5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610810565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061185f565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612395577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106123c1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106123df57662386f26fc10000830492506010015b6305f5e10083106123f7576305f5e100830492506008015b612710831061240b57612710830492506004015b6064831061241d576064830492506002015b600a83106106c15760010192915050565b6001811115611313576001600160a01b03841615612474576001600160a01b0384166000908152600560205260408120805483929061246e908490612dc5565b90915550505b6001600160a01b03831615611313576001600160a01b038316600090815260056020526040812080548392906124ab908490612dd8565b909155505050505050565b600060016124c384610c8d565b6124cd9190612dc5565b600083815260096020526040902054909150808214612520576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061256590600190612dc5565b6000838152600b6020526040812054600a805493945090928490811061258d5761258d612ca2565b9060005260206000200154905080600a83815481106125ae576125ae612ca2565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a8054806125e6576125e6612deb565b6001900381819060005260206000200160009055905550505050565b600061260d83610c8d565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b6001600160a01b03821661269c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610810565b6000818152600460205260409020546001600160a01b0316156127015760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610810565b61270f600083836001611fc8565b6000818152600460205260409020546001600160a01b0316156127745760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610810565b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461161857600080fd5b60006020828403121561283757600080fd5b8135611487816127f7565b60005b8381101561285d578181015183820152602001612845565b50506000910152565b6000815180845261287e816020860160208601612842565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006114876020830184612866565b6000602082840312156128d557600080fd5b5035919050565b6001600160a01b038116811461161857600080fd5b6000806040838503121561290457600080fd5b823561290f816128dc565b946020939093013593505050565b60008060006060848603121561293257600080fd5b833561293d816128dc565b9250602084013561294d816128dc565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261299e57600080fd5b813567ffffffffffffffff808211156129b9576129b961295e565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156129ff576129ff61295e565b81604052838152866020858801011115612a1857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a031215612a5357600080fd5b873596506020880135955060408801359450606088013593506080880135925060a0880135915060c088013567ffffffffffffffff811115612a9457600080fd5b612aa08a828b0161298d565b91505092959891949750929550565b600060208284031215612ac157600080fd5b8135611487816128dc565b600080600080600060a08688031215612ae457600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b801515811461161857600080fd5b60008060408385031215612b2857600080fd5b8235612b33816128dc565b91506020830135612b4381612b07565b809150509250929050565b60008060008060808587031215612b6457600080fd5b8435612b6f816128dc565b93506020850135612b7f816128dc565b925060408501359150606085013567ffffffffffffffff811115612ba257600080fd5b612bae8782880161298d565b91505092959194509250565b60008060408385031215612bcd57600080fd5b8235612bd8816128dc565b91506020830135612b43816128dc565b600181811c90821680612bfc57607f821691505b602082108103612c35577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612c9b57612c9b612c3b565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612ce357600080fd5b8151611487816128dc565b600060208284031215612d0057600080fd5b5051919050565b60008351612d19818460208801612842565b835190830190612d2d818360208801612842565b01949350505050565b82815260406020820152600061185f6040830184612866565b600060208284031215612d6157600080fd5b815161148781612b07565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612d9e6080830184612866565b9695505050505050565b600060208284031215612dba57600080fd5b8151611487816127f7565b818103818111156106c1576106c1612c3b565b808201808211156106c1576106c1612c3b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220584108aa59a11f671b880ef6701b6dafdbf65a4f67393697d635623a378e762f64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c8063715018a611610102578063a4353eb011610095578063cc3c0f0611610064578063cc3c0f06146105aa578063df0580fd146105e2578063e985e9c514610602578063f2fde38b1461064b57600080fd5b8063a4353eb014610535578063b88d4fde1461054a578063bc29942e1461056a578063c87b56dd1461058a57600080fd5b806395d89b41116100d157806395d89b41146104cb57806399d32fc4146104e05780639da5d98b146104f5578063a22cb4651461051557600080fd5b8063715018a614610442578063781d2e6a146104575780637d6fbd9e146104775780638da5cb5b146104ad57600080fd5b80632dfd452a1161017a5780636352211e116101495780636352211e14610360578063678f98b7146103805780636cbbd7b6146103f257806370a082311461042257600080fd5b80632dfd452a146102ed5780632f745c591461030057806342842e0e146103205780634f6ccce71461034057600080fd5b8063095ea7b3116101b6578063095ea7b31461026c57806318160ddd1461028e57806323b872dd146102ad5780632b7ac3f3146102cd57600080fd5b806301ffc9a7146101dd57806306fdde0314610212578063081812fc14610234575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004612825565b61066b565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b506102276106c7565b60405161020991906128b0565b34801561024057600080fd5b5061025461024f3660046128c3565b610759565b6040516001600160a01b039091168152602001610209565b34801561027857600080fd5b5061028c6102873660046128f1565b610780565b005b34801561029a57600080fd5b50600a545b604051908152602001610209565b3480156102b957600080fd5b5061028c6102c836600461291d565b6108b6565b3480156102d957600080fd5b50600c54610254906001600160a01b031681565b61028c6102fb366004612a38565b61093d565b34801561030c57600080fd5b5061029f61031b3660046128f1565b610ac1565b34801561032c57600080fd5b5061028c61033b36600461291d565b610b69565b34801561034c57600080fd5b5061029f61035b3660046128c3565b610b84565b34801561036c57600080fd5b5061025461037b3660046128c3565b610c28565b34801561038c57600080fd5b506103ca61039b3660046128c3565b600f60205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610209565b3480156103fe57600080fd5b506101fd61040d366004612aaf565b60106020526000908152604090205460ff1681565b34801561042e57600080fd5b5061029f61043d366004612aaf565b610c8d565b34801561044e57600080fd5b5061028c610d27565b34801561046357600080fd5b5061028c610472366004612acc565b610d3b565b34801561048357600080fd5b506102546104923660046128c3565b6000908152600d60205260409020546001600160a01b031690565b3480156104b957600080fd5b506000546001600160a01b0316610254565b3480156104d757600080fd5b506102276110ba565b3480156104ec57600080fd5b5061029f6110c9565b34801561050157600080fd5b5061029f6105103660046128c3565b61125b565b34801561052157600080fd5b5061028c610530366004612b15565b61127c565b34801561054157600080fd5b50600e5461029f565b34801561055657600080fd5b5061028c610565366004612b4e565b61128b565b34801561057657600080fd5b5061028c610585366004612aaf565b611319565b34801561059657600080fd5b506102276105a53660046128c3565b61141a565b3480156105b657600080fd5b506101fd6105c53660046128c3565b6000908152600d60205260409020546001600160a01b0316151590565b3480156105ee57600080fd5b5061028c6105fd366004612aaf565b61148e565b34801561060e57600080fd5b506101fd61061d366004612bba565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561065757600080fd5b5061028c610666366004612aaf565b61158b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806106c157506106c18261161b565b92915050565b6060600280546106d690612be8565b80601f016020809104026020016040519081016040528092919081815260200182805461070290612be8565b801561074f5780601f106107245761010080835404028352916020019161074f565b820191906000526020600020905b81548152906001019060200180831161073257829003601f168201915b5050505050905090565b6000610764826116fe565b506000908152600660205260409020546001600160a01b031690565b600061078b82610c28565b9050806001600160a01b0316836001600160a01b0316036108195760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806108355750610835813361061d565b6108a75760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610810565b6108b18383611762565b505050565b6108c033826117e8565b6109325760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610810565b6108b1838383611867565b610945611ad3565b6000848152600d60205260409020546001600160a01b0316156109aa5760405162461bcd60e51b815260206004820152600f60248201527f616c726561647920636c61696d656400000000000000000000000000000000006044820152606401610810565b6040805160208082018a9052818301899052606082018890526080820186905260a08083018690528351808403909101815260c083018085528151918301919091206000908152600f90925290839020610160830190935282548152600183015460e08301526002830154610100830181905260038401546101208401526004909301546101409092019190915290610a855760405162461bcd60e51b815260206004820152601060248201527f706c616365206e6f7420657869737473000000000000000000000000000000006044820152606401610810565b610a99601154338a8a8a8a8a8a8a34611b2c565b60118054906000610aa983612c6a565b919050555050610ab860018055565b50505050505050565b6000610acc83610c8d565b8210610b405760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610810565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b6108b18383836040518060200160405280600081525061128b565b6000610b8f600a5490565b8210610c035760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610810565b600a8281548110610c1657610c16612ca2565b90600052602060002001549050919050565b6000818152600460205260408120546001600160a01b0316806106c15760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610810565b60006001600160a01b038216610d0b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610810565b506001600160a01b031660009081526005602052604090205490565b610d2f611cd3565b610d396000611d2d565b565b3360009081526010602052604090205460ff16610dc05760405162461bcd60e51b815260206004820152603a60248201527f506562626c654d756c7469706c654c6f636174696f6e4e46543a2063616c6c6560448201527f72206973206e6f742074686520706c616365206d616e616765720000000000006064820152608401610810565b60008311610e105760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206d61782064697374616e63650000000000000000000000006044820152606401610810565b8181118015610e1e57504281115b610e6a5760405162461bcd60e51b815260206004820152601160248201527f696e76616c69642074696d657374616d700000000000000000000000000000006044820152606401610810565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaa2b5808512158015610e9e575063055d4a808513155b610eea5760405162461bcd60e51b815260206004820152600b60248201527f696e76616c6964206c61740000000000000000000000000000000000000000006044820152606401610810565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5456b008412158015610f1e5750630aba95008413155b610f6a5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206c6f6e6700000000000000000000000000000000000000006044820152606401610810565b6040805160208101879052908101859052606081018490526080810183905260a0810182905260009060c001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600f9093529120600201549091501561102c5760405162461bcd60e51b815260206004820152600e60248201527f726570656174656420706c6163650000000000000000000000000000000000006044820152606401610810565b6040805160a081018252968752602080880196875287820195865260608801948552608088019384526000838152600f909152908120965187559451600180880191909155935160028701559151600386015551600490940193909355600e805491820181559091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0155565b6060600380546106d690612be8565b600c54604080517fb17644c900000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163b17644c99160048083019260209291908290030181865afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111509190612cd1565b6040517f3245b6220000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039190911690633245b62290602401602060405180830381865afa1580156111af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d39190612cd1565b6040517f6fcca69b0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039190911690636fcca69b90602401602060405180830381865afa158015611232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112569190612cee565b905090565b600e818154811061126b57600080fd5b600091825260209091200154905081565b611287338383611d95565b5050565b61129533836117e8565b6113075760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610810565b61131384848484611e81565b50505050565b611321611cd3565b6001600160a01b03811660009081526010602052604090205460ff16156113b05760405162461bcd60e51b815260206004820152602a60248201527f506562626c654d756c7469706c654c6f636174696f6e4e46543a20616c72656160448201527f6479206d616e61676572000000000000000000000000000000000000000000006064820152608401610810565b6001600160a01b03811660008181526010602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f2f9ee5b083d19b4fbd83e4be14aa1001578c266abf2b290a1053718dd108f4f99190a250565b6060611425826116fe565b600061143c60408051602081019091526000815290565b9050600081511161145c5760405180602001604052806000815250611487565b8061146684611f0a565b604051602001611477929190612d07565b6040516020818303038152906040525b9392505050565b611496611cd3565b6001600160a01b03811660009081526010602052604090205460ff166115245760405162461bcd60e51b815260206004820152602660248201527f506562626c654d756c7469706c654c6f636174696f6e4e46543a206e6f74206d60448201527f616e6167657200000000000000000000000000000000000000000000000000006064820152608401610810565b6001600160a01b03811660008181526010602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517fb6f2279d13e81743ffa72180ff81661181aa50e834804a48f8019da533a790a39190a250565b611593611cd3565b6001600160a01b03811661160f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610810565b61161881611d2d565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806116ae57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806106c157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146106c1565b6000818152600460205260409020546001600160a01b03166116185760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610810565b600081815260066020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915581906117af82610c28565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806117f483610c28565b9050806001600160a01b0316846001600160a01b0316148061183b57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b8061185f5750836001600160a01b031661185484610759565b6001600160a01b0316145b949350505050565b826001600160a01b031661187a82610c28565b6001600160a01b0316146118f65760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610810565b6001600160a01b0382166119715760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610810565b61197e8383836001611fc8565b826001600160a01b031661199182610c28565b6001600160a01b031614611a0d5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610810565b600081815260066020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b038781168086526005855283862080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905590871680865283862080546001019055868652600490945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600260015403611b255760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610810565b6002600155565b600c546040517fb499ffd10000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152602482018b9052604482018a9052606482018990526084820188905260a4820187905260c48201869052600092169063b499ffd19060e401602060405180830381865afa158015611bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bde9190612cee565b600c546040517f258ae5820000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063258ae582908490611c2c9085908890600401612d36565b60206040518083038185885af1158015611c4a573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611c6f9190612d4f565b611cbb5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610810565b611cc68b8b88612110565b5050505050505050505050565b6000546001600160a01b03163314610d395760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610810565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031603611df65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610810565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e8c848484611867565b611e988484848461218d565b6113135760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610810565b60606000611f178361234c565b600101905060008167ffffffffffffffff811115611f3757611f3761295e565b6040519080825280601f01601f191660200182016040528015611f61576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611f6b57509392505050565b611fd48484848461242e565b600181111561204b5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f7274656400000000000000000000006064820152608401610810565b816001600160a01b0385166120a7576120a281600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b6120ca565b836001600160a01b0316856001600160a01b0316146120ca576120ca85826124b6565b6001600160a01b0384166120e6576120e181612553565b612109565b846001600160a01b0316846001600160a01b031614612109576121098482612602565b5050505050565b61211a8284612646565b6000818152600d602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038616908117909155905185928492917f9b01158d4bc10c112ba32b5240cda97e49e2eb86021f03f6a0f460342ac4dfda9190a4505050565b60006001600160a01b0384163b15612341576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906121ea903390899088908890600401612d6c565b6020604051808303816000875af1925050508015612243575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261224091810190612da8565b60015b6122f6573d808015612271576040519150601f19603f3d011682016040523d82523d6000602084013e612276565b606091505b5080516000036122ee5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610810565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061185f565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612395577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106123c1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106123df57662386f26fc10000830492506010015b6305f5e10083106123f7576305f5e100830492506008015b612710831061240b57612710830492506004015b6064831061241d576064830492506002015b600a83106106c15760010192915050565b6001811115611313576001600160a01b03841615612474576001600160a01b0384166000908152600560205260408120805483929061246e908490612dc5565b90915550505b6001600160a01b03831615611313576001600160a01b038316600090815260056020526040812080548392906124ab908490612dd8565b909155505050505050565b600060016124c384610c8d565b6124cd9190612dc5565b600083815260096020526040902054909150808214612520576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061256590600190612dc5565b6000838152600b6020526040812054600a805493945090928490811061258d5761258d612ca2565b9060005260206000200154905080600a83815481106125ae576125ae612ca2565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a8054806125e6576125e6612deb565b6001900381819060005260206000200160009055905550505050565b600061260d83610c8d565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b6001600160a01b03821661269c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610810565b6000818152600460205260409020546001600160a01b0316156127015760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610810565b61270f600083836001611fc8565b6000818152600460205260409020546001600160a01b0316156127745760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610810565b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461161857600080fd5b60006020828403121561283757600080fd5b8135611487816127f7565b60005b8381101561285d578181015183820152602001612845565b50506000910152565b6000815180845261287e816020860160208601612842565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006114876020830184612866565b6000602082840312156128d557600080fd5b5035919050565b6001600160a01b038116811461161857600080fd5b6000806040838503121561290457600080fd5b823561290f816128dc565b946020939093013593505050565b60008060006060848603121561293257600080fd5b833561293d816128dc565b9250602084013561294d816128dc565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261299e57600080fd5b813567ffffffffffffffff808211156129b9576129b961295e565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156129ff576129ff61295e565b81604052838152866020858801011115612a1857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a031215612a5357600080fd5b873596506020880135955060408801359450606088013593506080880135925060a0880135915060c088013567ffffffffffffffff811115612a9457600080fd5b612aa08a828b0161298d565b91505092959891949750929550565b600060208284031215612ac157600080fd5b8135611487816128dc565b600080600080600060a08688031215612ae457600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b801515811461161857600080fd5b60008060408385031215612b2857600080fd5b8235612b33816128dc565b91506020830135612b4381612b07565b809150509250929050565b60008060008060808587031215612b6457600080fd5b8435612b6f816128dc565b93506020850135612b7f816128dc565b925060408501359150606085013567ffffffffffffffff811115612ba257600080fd5b612bae8782880161298d565b91505092959194509250565b60008060408385031215612bcd57600080fd5b8235612bd8816128dc565b91506020830135612b43816128dc565b600181811c90821680612bfc57607f821691505b602082108103612c35577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612c9b57612c9b612c3b565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612ce357600080fd5b8151611487816128dc565b600060208284031215612d0057600080fd5b5051919050565b60008351612d19818460208801612842565b835190830190612d2d818360208801612842565b01949350505050565b82815260406020820152600061185f6040830184612866565b600060208284031215612d6157600080fd5b815161148781612b07565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612d9e6080830184612866565b9695505050505050565b600060208284031215612dba57600080fd5b8151611487816127f7565b818103818111156106c1576106c1612c3b565b808201808211156106c1576106c1612c3b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220584108aa59a11f671b880ef6701b6dafdbf65a4f67393697d635623a378e762f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 192,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 194,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 198,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 202,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 206,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 212,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1260,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1264,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1267,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1271,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3104,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "verifier",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IMetapebbleDataVerifier)3868"
      },
      {
        "astId": 3128,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "_claimedDevices",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3358,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "placesHash",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 3363,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "places",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_struct(Place)3332_storage)"
      },
      {
        "astId": 3367,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "placeManagers",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3369,
        "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
        "label": "tokenId",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMetapebbleDataVerifier)3868": {
        "encoding": "inplace",
        "label": "contract IMetapebbleDataVerifier",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(Place)3332_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PebbleMultipleLocationNFT.Place)",
        "numberOfBytes": "32",
        "value": "t_struct(Place)3332_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Place)3332_storage": {
        "encoding": "inplace",
        "label": "struct PebbleMultipleLocationNFT.Place",
        "members": [
          {
            "astId": 3323,
            "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
            "label": "lat",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 3325,
            "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
            "label": "long",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 3327,
            "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
            "label": "maxDistance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3329,
            "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3331,
            "contract": "contracts/examples/PebbleMultipleLocationNFT.sol:PebbleMultipleLocationNFT",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}